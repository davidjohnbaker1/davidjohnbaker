<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David John Baker on David John Baker</title>
    <link>/</link>
    <description>Recent content in David John Baker on David John Baker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 David John Baker</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Looking For Musicologists on Twitter</title>
      <link>/post/looking-for-musicologists-on-twitter/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/looking-for-musicologists-on-twitter/</guid>
      <description>&lt;p&gt;For the most part, Twitter is full of garbage. But I’m an optimist and a firm believer in &lt;a href=&#34;https://en.wikipedia.org/wiki/Sturgeon%27s_law&#34;&gt;Sturgeon’s Law&lt;/a&gt; so by that logic there must be some good on it. That good is academic twitter.&lt;/p&gt;
&lt;p&gt;While this isn’t a post advocating for academic Twitter, I did want to&lt;br /&gt;
1. see if I could figure out how to write a post with some R code in it and 2. share how I scraped Twitter to find active users in the Musicology and Music Theory community&lt;/p&gt;
&lt;p&gt;So here it goes…&lt;/p&gt;
&lt;p&gt;The first thing that you have to do is get some tweets. Luckily some packages exist in the #rstats world that can help with this. For this project I used the &lt;a href=&#34;https://cran.r-project.org/web/packages/twitteR/twitteR.pdf&#34;&gt;twitteR&lt;/a&gt; package which lets you log into Twitter’s API via R and and search it. There are already some instructions on how to get started with it that you can find &lt;a href=&#34;https://davetang.org/muse/2013/04/06/using-the-r_twitter-package/&#34;&gt;here&lt;/a&gt;, so I won’t go into tons of detail about setting it up. (Also please note you can’t just copy and paste my code verbatim since it requires credentials from &lt;em&gt;your&lt;/em&gt; own Twitter account)&lt;/p&gt;
&lt;p&gt;Let’s first load the two packages we’ll need.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)
library(twitteR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up, we need to access Twitter’s API by entering in the details from the link above. I find it’s easiest to copy and paste each of my keys and tokens into a nice little character string, assign those to an object, then call those objects in the last command in this block.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;consumer_key &amp;lt;- &amp;#39;YOUR CONSUMER KEY HERE&amp;#39;
consumer_secret &amp;lt;- &amp;#39;COPY AND PASTE YOUR CONSUMER SECRET HERE&amp;#39;
access_token &amp;lt;- &amp;#39;THEN PUT YOUR ACCESS TOKEN HERE&amp;#39;
access_secret &amp;lt;- &amp;#39;AND YOUR ACCESS SECRET HERE&amp;#39;
setup_twitter_oauth(consumer_key, consumer_secret, access_token=NULL, access_secret=NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running that last line in the chunk should then direct you to your default browser. This will log you into your Twitter account and R will ask for Twitter’s permission to enter through the back door.&lt;/p&gt;
&lt;p&gt;The next bit of code won’t run the way I have it set up because Twitter doesn’t let you download tweets older than a week old. So if you want to play with tweets from a conference’s hashtag or some event, make sure to think ahead to download them!!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;amsTwitter &amp;lt;- searchTwitter(&amp;quot;#smt2017&amp;quot;, n = 700)
amsTwitter &amp;lt;- searchTwitter(&amp;quot;#amsroc17&amp;quot;, n = 1600)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This line above searches Twitter for anything matching the conference hashtags and saves the output of it in a list. You can also include an argument asking for a certain number of tweets, which I’ve also done. Luckily the twitteR package has a function that will take this list and convert it to a data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;amsTwitter.df &amp;lt;- twListToDF(amsTwitter)
smtTwitter.df &amp;lt;- twListToDF(smtTwitter)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these nice data frames, we’ll soon be able to join them together and count up some tweets! In order to do this we can take advantage of the &lt;a href=&#34;https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html&#34;&gt;data.table&lt;/a&gt; package to join our two tables together. Of course there are other ways, but Ben over at &lt;a href=&#34;https://gormanalysis.com/&#34;&gt;Gorm Analytics&lt;/a&gt; sold me on data.table this past summer and since then I have really been loving its easy syntax.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;amsTwitter.dt &amp;lt;- data.table(amsTwitter.df)
smtTwitter.dt &amp;lt;- data.table(smtTwitter.df)
amstweets &amp;lt;- amsTwitter.dt[, .(amsTweets = .N), by=screenName][order(-amsTweets)]
smttweets &amp;lt;- smtTwitter.dt[, .(smtTweets = .N), by=screenName][order(-smtTweets)]
totalTweets &amp;lt;- merge(smttweets,amstweets, on =&amp;quot;screenName&amp;quot;, all = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing the above code does is swap our data frames over to data.tables. Once they are in the data.table format, we can count up the tweets by screen name, then list them from biggest to smallest all in the same line. From there we merge the two together via the shared column, making sure to grab every instance in each table since not every Tweeter tweeted with both hashtags.&lt;/p&gt;
&lt;p&gt;We then need to clean up some of the NAs (which as a data.table are characters!) in our bigger dataset with R’s ifelse() function that basically works exactly like an ifelse statement would in Microsoft Excel. It looks over a column in your dataset, checks if a value is an NA, if it is then it gives it a 0, if not, it puts in the value that was there in the first place. After replacing NAs, I then make a new variable that adds together both columns then run our final line that prints out our final dataset from top to bottom.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;totalTweets$smtTweets &amp;lt;- ifelse(test = is.na(totalTweets$smtTweets),
                                yes = 0,
                                no = totalTweets$smtTweets) 
totalTweets$amsTweets &amp;lt;- ifelse(test = is.na(totalTweets$amsTweets),
                                yes = 0,
                                no = totalTweets$amsTweets) 

totalTweets[, TotalTweets := smtTweets + amsTweets]
totalTweets[order(-TotalTweets)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From here it was simply a matter of using an &lt;a href=&#34;http://www.convertcsv.com/csv-to-html.htm&#34;&gt;online converter&lt;/a&gt; to turn it our final table an html file and then ssh it up to our &lt;a href=&#34;http://musiccog.lsu.edu/&#34;&gt;Music Cognition at LSU&lt;/a&gt; server! Since then I’ve also added both the 2017 &lt;a href=&#34;https://musiccog.lsu.edu/davidjohnbaker/data/amsmt17twitterdata/AmtTwitterData.csv&#34;&gt;AMS&lt;/a&gt; and &lt;a href=&#34;https://musiccog.lsu.edu/davidjohnbaker/data/amsmt17twitterdata/SmtTwitterData.csv&#34;&gt;SMT&lt;/a&gt; datasets that I used to generate the counts in case you want to try this for yourself.&lt;/p&gt;
&lt;p&gt;If anyone has any questions on this, please &lt;a href=&#34;https://twitter.com/DavidJohnBaker&#34;&gt;tweet me&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculating iMultisets in R</title>
      <link>/post/calculating-imultisets-in-r/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/calculating-imultisets-in-r/</guid>
      <description>&lt;p&gt;November is pretty much the worst month for people in higher education. There are too many deadlines and if you’re still in coursework (like myself) you have essays to write, presentations to make, and a backlog of homework assigments to grade. So if you can save time here or there, it’s usually a good choice.&lt;/p&gt;
&lt;p&gt;This weekend I was working a homework assingment for my Transformational Theory seminar where we were given a number of pairs of pitch class sets and had to calculate the imultiset for each following Joseph Straus’ 2014 article on &lt;a href=&#34;http://www.mtosmt.org/issues/mto.14.20.2/mto.14.20.2.straus.html&#34;&gt;Total Voice Leading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I looked at the top of the assigment (pictured below) and started to crank out the first one by hand, I realized that the next 30 minutes of my life were going to be doing the same thing over and over again.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/imultiset.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Usually if I get that feeling my next thought is “Can I make a computer do this?” and after thinking about it for two minutes I realized the answer was yes.&lt;/p&gt;
&lt;p&gt;So instead of doing all of these by hand, I wrote an R script and with the time saved figured I’d write a quick post about it.&lt;/p&gt;
&lt;div id=&#34;the-problem&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;In order to calculate the imultiset you need two pitch class sets, in this case X and Y. Each set can have any number of pitch classes in them and what you need to do is calculate the distance in &lt;a href=&#34;http://openmusictheory.com/mod12.html&#34;&gt;Modulo 12 space&lt;/a&gt; between every possible combination of pitch classes from one set to the other. So for example, you could move from 4 (E in Mod 12 for you non-music theory readers) to 7, 11, 2, or 5 (G, B, D, or F) resulting in four intervals: {3,7,10,1}. These four numbers in the {curly braces} are what you get when you subtract each number in the second set from the note E in Mod 12 space. This action then needs to be completed for every pair.&lt;/p&gt;
&lt;p&gt;When you need to account for every pairing you need to do a &lt;a href=&#34;https://www.w3resource.com/sql/joins/cross-join.php&#34;&gt;cross join&lt;/a&gt;. A cross join connects each member of one set to each member of another set. This creates the sets of pairs seen below.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/imultisetcj.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Then all you need to do is subtract one from the other to get the distance. The only problem is that these subtractions need to happen in Mod 12 space so in any case where you are subtracting a bigger number from a smaller number you will get a negative result! This is easily fixed by just adding 12 to that number in order to get what we &lt;em&gt;should&lt;/em&gt; have been our answer if we were doing Mod 12 arithmatic.&lt;/p&gt;
&lt;p&gt;After fixing the Mod 12 problem, you’ll have a nice list of intervals that just have to be sorted from top to bottom to have your imultiset. So let’s see how you would do this line by line.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Code&lt;/h2&gt;
&lt;p&gt;First, let’s get two pitch class sets. In this case we have a C major triad and a G dominant chord.&lt;/p&gt;
&lt;p&gt;X = {0,4,7} and Y = {7,11,2,5}&lt;/p&gt;
&lt;p&gt;Let’s first assign each chord to an object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;X &amp;lt;- c(0,4,7)
Y &amp;lt;- c(7,11,2,5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to do that cross join, which we can accompish with R’s merge() function. This makes us a data frame with every combination from set X and set Y. Below we see the function’s output.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Example &amp;lt;- merge(X,Y,all=TRUE)
Example&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x  y
## 1  0  7
## 2  4  7
## 3  7  7
## 4  0 11
## 5  4 11
## 6  7 11
## 7  0  2
## 8  4  2
## 9  7  2
## 10 0  5
## 11 4  5
## 12 7  5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once having each combination, we then subtract one set from the other. Since I don’t know how to put R into Music Theory Mode where it only operates in Mod 12, we can fix the problem of the negative numbers by just indexing through our answer with in ifelse() statement to replace any negative values with the answer we actually want by adding 12 to it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Example$diff &amp;lt;- Example$y - Example$x
Example$diff&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  7  3  0 11  7  4  2 -2 -5  5  1 -2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Example$mod12 &amp;lt;- ifelse(test = Example$diff &amp;lt; 0 , 
                        yes = Example$diff + 12, 
                        no = Example$diff)
Example$mod12&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  7  3  0 11  7  4  2 10  7  5  1 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With our numbers then in Mod 12 space, we just sort them and we get our imultiset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sort(Example$mod12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  0  1  2  3  4  5  7  7  7 10 10 11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course you are not going to want to write this out every time you want to calculate an imultiset, so best to just write a function that does what we just did.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate.multiset &amp;lt;- function(x,y){
  array.1 &amp;lt;- x 
  array.2 &amp;lt;- y
  cross.join &amp;lt;- merge(array.1,array.2, all = TRUE)
  cross.join$diff &amp;lt;- cross.join$y - cross.join$x
  cross.join$mod12 &amp;lt;- ifelse(cross.join$diff &amp;lt; 0, cross.join$diff + 12, cross.join$diff)
  sort(cross.join$mod12)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Modeling Performance on Aural Skills Examinations</title>
      <link>/talk/yboa-aural-2017/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/talk/yboa-aural-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>/post/2017-08-26-hello-world/</link>
      <pubDate>Sat, 26 Aug 2017 13:09:13 -0600</pubDate>
      
      <guid>/post/2017-08-26-hello-world/</guid>
      <description>&lt;p&gt;Hello, world!&lt;/p&gt;

&lt;p&gt;This is my first blog post on my fresh, new website.
I&amp;rsquo;ve been off the world of blogging for quite some time, but will hopefully be populating this site with all things music and science in the near future.
I&amp;rsquo;d like to create content relevant to what it&amp;rsquo;s like to do research in music science and help anyone out who is interested in learning more about anything from graduate school life, to computational musicology, to music psychology.&lt;/p&gt;

&lt;p&gt;Thanks again for visiting for now and hope to see you soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Modeling and Perception of Melodic Similarity in Jazz Improvisation</title>
      <link>/talk/smpc-similarity-2017/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/talk/smpc-similarity-2017/</guid>
      <description>&lt;p&gt;Poster presented at the Society for Music Perception and Cognition, 2017&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validating the Goldsmiths Musical Sophistication Index in a Sample of American Participants</title>
      <link>/talk/smpc-gold-2017/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/talk/smpc-gold-2017/</guid>
      <description>&lt;p&gt;Poster presented at the Society for Music Perception and Cognition, 2017&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Relational Network Approach to Rock Music Syntax</title>
      <link>/talk/smpc-rock-2017/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/talk/smpc-rock-2017/</guid>
      <description>&lt;p&gt;Poster presented at the Society for Music Perception and Cognition, 2017&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perception of Leitmotives in Richard Wagner&#39;s Der Ring des Nibelungen</title>
      <link>/publication/wagner-frontiers/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/wagner-frontiers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Matching Music to Brand Personality: A Semantic Differential Tool for Measuring Emotional Space</title>
      <link>/publication/matching-music-to-brand/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/publication/matching-music-to-brand/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Music, animacy, and rubato: what makes music sound human?</title>
      <link>/publication/animacy-proceedings/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/publication/animacy-proceedings/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Role of Idiomaticism and Affordances in Bebop Improvisation</title>
      <link>/publication/bebop-proceedings/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/publication/bebop-proceedings/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;This is a &amp;ldquo;hello world&amp;rdquo; example website for the &lt;a href=&#34;https://github.com/rstudio/blogdown&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; package. The theme was forked from &lt;a href=&#34;https://github.com/jrutheiser/hugo-lithium-theme&#34; target=&#34;_blank&#34;&gt;@jrutheiser/hugo-lithium-theme&lt;/a&gt; and modified by &lt;a href=&#34;https://github.com/yihui/hugo-lithium-theme&#34; target=&#34;_blank&#34;&gt;Yihui Xie&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computational Musicology</title>
      <link>/project/computational-musicology/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/computational-musicology/</guid>
      <description>&lt;p&gt;Computational Musicology involves using computers to digitize musical data and then using powerful software to search through massive amounts of data that would be unfeasible to do by hand. I am particularly interested in using symbolic data to extract information from melodies that can be used to predict how well melodies are remembered and creating new data sets that others can use.&lt;/p&gt;

&lt;p&gt;One project involving creating new datasets involves curating a dataset of improvised jazz solos.
In its current state, the corpus is encoded in **kern and has solos from Charlie Parker (~70), Clifford Brown (~80), as well as Dizzy Gillespie (~10).
We are in the process of including data from Miles Davis, John Coltrane, as well as other artists.
Though not publicly availible yet, the dataset will have both melodic as well as harmonic information and be easily indexed using the &lt;a href=&#34;http://www.humdrum.org/&#34; target=&#34;_blank&#34;&gt;Humdrum&lt;/a&gt; tool kit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Music Cognition and Computation Lab</title>
      <link>/project/lsu-lab-external/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/lsu-lab-external/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Music and Memory</title>
      <link>/project/music-and-memory/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/music-and-memory/</guid>
      <description>&lt;p&gt;My main research interest is investigating what individual and musical factors contribute to how someone learns and remembers a melody. Not only do findings in this area have relevance for music perception, but they also have  implications for how aural skills are taught at the conservatory level of music education.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
